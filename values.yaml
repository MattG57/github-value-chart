name: github-value
version: 0.1.0
appVersion: 0.1
deployment:
  mode: split-pods # can be "single-pod" or "split-pods"

kubernetesEnvironment: gke  # Possible values: gke, dockerdesktop, openshift, aks 
# sets default networking and storageClassName for the environment (#managed-csi #standard-rwo #thin-csi #hostpath)

# General settings
replicaCount: 1  # Number of replicas for the Deployment

namespace: default  # Kubernetes namespace where the Deployment will be created

serviceAccountName: custom-sa-name

# Primary application container (frontend/backend)
app:
  image:
    repository: mgunter/github-value-amd2  # Docker repository for the application image
    tag: "latest"  # Docker image tag
    pullPolicy: IfNotPresent  # Image pull policy (e.g., Always, IfNotPresent)
  name: github-value  # Name of the primary container within the Pod  
  volumes:
  - name: config-volume
    configMap:
      name: github-value-config
  - name: working-volume
    emptyDir: {}
  volumeMounts:
    - name: config-volume
      mountPath: /etc/config
    - name: working-volume
      mountPath: /var/lib/app
  configKey: config-value
  config:
    PORT: 8080
    MYSQL_HOST: github-value-chart-mysql
    MYSQL_PORT: 3306
    MYSQL_USER: root
    MYSQL_PASSWORD: octocat
    MYSQL_DATABASE: c7km0hpn62ch57zy
    BASE_URL: http://localhost:80
    GITHUB_APP_ID: "1053289"
    GITHUB_APP_PRIVATE_KEY: |
      -----BEGIN RSA PRIVATE KEY-----
      MIIEpAIBAAKCAQEAvrjhS/UUlP3ChndWKYScHX3FoHRRDNbCacxth/WNrYX5DDyZ
      ZHcQj1GrBCWJqq3BUw4J9/F8YHPj5PVQsXDgmiwC+WCEIpVIXqCUzVdmkuYgzAiK
      je9aQ/ujCFYYvfsjERz7nwT2yDK3QOMmtp0hTAGFxHxZQHzPVKxO2tsS5WKlV2lm
      rrcDcEEEFQof/vzfbBtxxJjApuHUGH35wIs5zi/eo+HB/3kEcneSqSQZ7puaVEOn
      gmxjg9m7qsicSbjZgrB3zHP98Cyw/iSzVNpN1UffjepKshwOyQnS84Y4r0wxV5o/
      H87hMr4lZof3OMibE6yVR/xvTh9KbviCR07VIQIDAQABAoIBAQCr57pym2m8zWlL
      iD7qVzPbxSSfdpgjaWN8tx02wda8xBfxtqFQE52igKsTpr4KUGkDcpD7ofdIfMy5
      73+XIDXh4K+hlSQkg8fiOv1EhHXZDIIdRcmVG1uSETsm5WuRuc4mu6f08iV513Sj
      kNqxGLoNZwXqT2anIJhEKrc8vt+uToZiNgD36HhYuKgCUGent/d6EJMNQ0DKvhuS
      vnRpYlZZJicZC9G/iG0oOPR8kXIsdkyhKUetP0bBgfEZGRctxoRpes03llhHNx3Y
      B/p/Bzt7Kkdg4swtuFsfLTPLw4DtwadtgmEC53ZFS5vLnRVSi/D+7AKeNUuBPf2a
      WF55ej1RAoGBAPUAdwAmlvwhr4WrA2wW0bJQv08IkST5POedUNNhF2XqcWy5GDed
      0F9TBFJJndkQ7NYcJM0faXIx1BVcvugOyOKEy0v0djmtl16GYaQj0PS7JSHqTbUs
      ccxYZ8YN2U8UkbAMIXw86OE40qo6n9RdzUnlMaJRKscgIeZETuPHFoqlAoGBAMdI
      o7G1wf5L0hpQG8PXdZPVmVmCevSYH4iJVJCZOhyakyL2tJriCGsVDHXHvSREj1ik
      +ftpgPFO7vN4w4I/3KGNMvANqZ02+cqn0v8kwXu6KCNnZ/wfMNmGm68nUVZFwzKi
      3yTvxIZutO1h9l9zpW2bepUr+jNaGMSzKu9q1GPNAoGAfBOeMJ9ae5n7sDApbYYo
      8KtgF4B5MUZgB9Rt6H8VQHH4u10J3LC5pG0AlUPfAt1FdDGQmak8165Qf/kWXaOP
      LNiftHm7nf5B2Icpz9yrqCVW6tQkQoqdnyVueKju0tPR7FxYYPjf35/NYJSL+RsA
      Klo+RrvgdDPbtygE4+ohilkCgYB6gD6P2SjdBwKqRiArLOEL9TuE+F5YyMJpjfG7
      yVUdjC9ySLEQnG2MVa4JILU1/CcZ2KAKWfp3W4wrgkq8YEFh1YhAZEWlbMv0NWHQ
      kWmWgwJ1cPVM2GeQ79v3uXWYUN4C3HfLHtBxys/RNGzclBxW2kJqPFRbCME8+N4l
      ukfA6QKBgQCPEsy6JE7y4lWycvvQs3D7YicuyCVzd0MmT/XgQpQBvGArBWRpVOLx
      jWHnY+A+MffoZliUAeHAv0O+oV+GP0FQoOD/n3m4E8jAhEICu5L3DF++8PDYLboa
      klaqJcFGcUz9ugf+MP72btX3IeSCDaDCM2Fuq+tGj9t8fAI/gpebSA==
      -----END RSA PRIVATE KEY-----
    GITHUB_WEBHOOK_SECRET: abc123
    GITHUB_APP_INSTALLATION_ID: 1053289
  resources:
    requests:
      cpu: "6"   # 2 vCPU
      memory: "8Gi" # 16 Gi
    limits:
      cpu: "8"      # 4 vCPU
      memory: "10Gi"  # 32 GB

# Sidecar container settings
poller:
  image: busybox # or another image that has `nc` installed (e.g. alpine) 
  command: ["sh", "-c", "until nc -zv github-value-chart-mysql 3306; do echo waiting for mysql; sleep 5; done"]
# Database container settings
db:
  image:
    repository: mongo  # Docker repository for the database image
    tag: latest  # Docker image tag for the database
    pullPolicy: IfNotPresent  # Image pull policy for the database image
  name: github_valuedb  # Name of the MySQL database to initialize  
  credentials:
    database: github-value  # Name of the database to be initialized
    rootPassword: octocat  # Root password for MongoDB (use a Secret in production)
  configMapName: db-config  # Name of the ConfigMap for MongoDB database
  configMapKey: MONGODB_DATABASE  # Key in the ConfigMap for MySQL database
  secretName: db-secret  # Name of the Secret for mongodb root password
  secretKey: MongoDB_ROOT_PASSWORD  # Key in the Secret for mongodb root password
  containerPort: 27017  # Add this line
  livenessProbe:
    exec:
       command:
        - mongo
        - --eval
        - "db.adminCommand('ping')"
    initialDelaySeconds: 15
    periodSeconds: 10
    failureThreshold: 5
    successThreshold: 1
  readinessProbe:
    exec:
      command:
        - mongo
        - --eval
        - "db.adminCommand('ping')"
    initialDelaySeconds: 10
    periodSeconds: 5
    failureThreshold: 3
    successThreshold: 1
  volumes:
  - name: db-config-volume
    configMap:
      name: db-config
  - name: db-working-volume
    persistentVolumeClaim:
      claimName: db-pvc  
  volumeMounts:
    - name: db-config-volume
      mountPath: /etc/db-config
    - name: db-working-volume
      mountPath: /var/lib/mysql
  resources:
    requests:
      cpu: "6"   # 2 vCPU
      memory: "6Gi" # 16 Gi
    limits:
      cpu: "8"      # 4 vCPU
      memory: "8Gi"  # 32 GB
  persistentVolumeClaim:
    name: db-pvc
    accessModes:
      - ReadWriteOnce
    resources:
      requests:
        storage: 2Gi
    storageClassName: ""   # Replace hostpath standard-rwo with your cluster's storage class

# Service ports
service:
  type: ""  # Kubernetes service type --see logic in templates/service.yaml
  protocol: TCP  # Protocol used by the service (TCP is default)
  port: 8080  # Port exposed by the service for the application
  targetPort: 8080  # Port on the container that the service routes to
  nodePort: 30080  # Specific NodePort for external access

# DB Service ports
dbService:
  type: ""  # Kubernetes service type --see logic in templates/mongodb-service.yaml
  protocol: TCP  # Protocol used by the service (TCP is default)
  port: 27017  # Port exposed by the service for the application
  targetPort: 27017  # Port on the container that the service routes to
  nodePort: 3100  # Specific NodePort for external access

serviceAccount:
  create: true              # Whether to create the ServiceAccount
  name: custom-sa-name       # Custom name for the ServiceAccount (optional)
  automount: true            # Whether to automount the service account token
  annotations: {}             # Additional annotations for the ServiceAccount
  example-annotation: value

ingress:
  enabled: false
  annotations: {}
  hosts:
    - host: example.com
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []

rbac:
  create: true               # Whether to create a ClusterRoleBinding

autoscaling:
  enabled: false # Set to true to enable HorizontalPodAutoscaler (HPA)
  minReplicas: 1
  maxReplicas: 5
  targetCPUUtilizationPercentage: 80

volumes:
  - name: config-volume
    configMap:
      name: github-value-config
  - name: working-volume
    emptyDir: {}
  - name: db-config-volume
    configMap:
      name: db-config
  - name: db-working-volume
    persistentVolumeClaim:
      claimName: mongodb-pvc
