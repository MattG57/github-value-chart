name: github-value
version: 0.1.0
appVersion: 0.1
deployment:
  mode: split-pods # can be "single-pod" or "split-pods"

kubernetesEnvironment: gke  # Possible values: gke, dockerdesktop

# General settings
replicaCount: 1  # Number of replicas for the Deployment

namespace: default  # Kubernetes namespace where the Deployment will be created

serviceAccountName: custom-sa-name

# Primary application container (frontend/backend)
app:
  image:
    repository: mgunter/github-value-amd2  # Docker repository for the application image
    tag: "latest"  # Docker image tag
    pullPolicy: IfNotPresent  # Image pull policy (e.g., Always, IfNotPresent)
  name: github-value  # Name of the primary container within the Pod  
  volumeMounts:
    - name: config-volume
      mountPath: /etc/config
    - name: working-volume
      mountPath: /var/lib/app
  configKey: config-value
  config:
    PORT: 8080
    MYSQL_HOST: github-value-chart-mysql
    MYSQL_PORT: 3306
    MYSQL_USER: root
    MYSQL_PASSWORD: <password
    MYSQL_DATABASE: value
    BASE_URL: http://localhost:80
    GITHUB_APP_ID: 1053289
    GITHUB_APP_PRIVATE_KEY: |
     <private key>
    GITHUB_WEBHOOK_SECRET: abc123
    GITHUB_APP_INSTALLATION_ID: 1053289

# Database container settings
db:
  image:
    repository: mysql  # Docker repository for the database image
    tag: latest  # Docker image tag for the database
    pullPolicy: IfNotPresent  # Image pull policy for the database image
  name: github_valuedb  # Name of the MySQL database to initialize  
  credentials:
    database: value  # Name of the database to be initialized
    rootPassword: <password>  # Root password for MySQL (consider a Secret in production)
  configMapName: db-config  # Name of the ConfigMap for MySQL database
  configMapKey: MYSQL_DATABASE  # Key in the ConfigMap for MySQL database
  secretName: db-secret  # Name of the Secret for MySQL root password
  secretKey: MYSQL_ROOT_PASSWORD  # Key in the Secret for MySQL root password
  containerPort: 3306  # Add this line
  livenessProbe:
    exec:
       command:
        - mysqladmin
        - ping
        - "-h"
        - "localhost"
    initialDelaySeconds: 15
    periodSeconds: 10
    failureThreshold: 5
    successThreshold: 1
  readinessProbe:
    exec:
      command:
        - mysqladmin
        - ping
        - "-h"
        - "localhost"
    initialDelaySeconds: 10
    periodSeconds: 5
    failureThreshold: 3
    successThreshold: 1
  volumeMounts:
    - name: db-config-volume
      mountPath: /etc/db-config
    - name: db-working-volume
      mountPath: /var/lib/mysql
  persistentVolumeClaim:
    name: db-pvc
    accessModes:
      - ReadWriteOnce
    resources:
      requests:
        storage: 2Gi
    storageClassName: ""   # Replace hostpath standard-rwo with your cluster's storage class

# Service ports
service:
  type: ""  # Kubernetes service type
  protocol: TCP  # Protocol used by the service (TCP is default)
  port: 8080  # Port exposed by the service for the application
  targetPort: 8080  # Port on the container that the service routes to
  nodePort: 30080  # Specific NodePort for external access

serviceAccount:
  create: true              # Whether to create the ServiceAccount
  name: custom-sa-name       # Custom name for the ServiceAccount (optional)
  automount: true            # Whether to automount the service account token
  annotations: {}             # Additional annotations for the ServiceAccount
  example-annotation: value

ingress:
  enabled: false
  annotations: {}
  hosts:
    - host: example.com
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []

rbac:
  create: true               # Whether to create a ClusterRoleBinding

autoscaling:
  enabled: false # Set to true to enable HorizontalPodAutoscaler (HPA)
  minReplicas: 1
  maxReplicas: 5
  targetCPUUtilizationPercentage: 80

volumes:
  - name: config-volume
    configMap:
      name: github-value-config
  - name: working-volume
    emptyDir: {}
  - name: db-config-volume
    configMap:
      name: db-config
  - name: db-working-volume
    persistentVolumeClaim:
      claimName: db-pvc
